torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
torch.Size([256, 32])
Traceback (most recent call last):
  File "scripts/train.py", line 47, in <module>
    train(args)
  File "scripts/train.py", line 43, in train
    ppo_runner.learn(num_learning_iterations=train_cfg.runner.max_iterations, init_at_random_ep_len=True)
  File "/home/chenfu/isaac gym/rsl_rl/rsl_rl/runners/on_policy_runner.py", line 295, in learn_vision
    coder_loss = self.alg.update_coder(stu_coder, critic_coder)
  File "/home/chenfu/isaac gym/rsl_rl/rsl_rl/algorithms/ppo.py", line 168, in update_coder
    encoder_loss = (stu_coder.detach() - critic_coder).norm(p=2, dim=1).mean()
RuntimeError: The size of tensor a (30720) must match the size of tensor b (6144) at non-singleton dimension 0